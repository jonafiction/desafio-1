name: EC2 Instance Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy-ec2:
    runs-on: ubuntu-latest
    outputs:
      instance-id: ${{ steps.get-instance-id.outputs.instance_id }}
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Crear instancia EC2
        run: |
          aws ec2 run-instances \
            --image-id ami-0166fe664262f664c \
            --count 1 \
            --instance-type t2.micro \
            --key-name pwddesafio1 \
            --security-group-ids sg-desafio1 \
            --subnet-id subnet-desafio1 \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=InstanciaDesafio1}]'

      - name: Generar Clave SSH
        run: |
          # Generar par de claves SSH
          ssh-keygen -t rsa -b 2048 -f ./ec2-key -N ""

          # Importar clave pública a AWS
          aws ec2 import-key-pair \
            --key-name pwddesafio1 \
            --public-key-material file://./ec2-key.pub

          # Guardar clave privada como secreto en GitHub (opcional pero recomendado)
          echo "$(<./ec2-key)" | gh secret set EC2_PRIVATE_KEY

      - name: Obtener ID de Instancia
        id: get-instance-id
        run: |
          # Esperar hasta que la instancia esté en estado running
          aws ec2 wait instance-running \
            --filters "Name=tag:Name,Values=InstanciaDesafio1"

          # Ahora obtener el ID
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=InstanciaDesafio1" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text)

          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Configurar reglas del grupo de seguridad
        run: |
          SECURITY_GROUP_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=InstanciaDesafio1" \
            --query 'Reservations[0].Instances[0].SecurityGroups[0].GroupId' \
            --output text)

          aws ec2 authorize-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr 0.0.0.0/0

          aws ec2 authorize-security-group-egress \
            --group-id $SECURITY_GROUP_ID \
            --ip-permissions '[
              {
                  "IpProtocol": "-1",
                  "FromPort": -1,
                  "ToPort": -1,
                  "IpRanges": [
                      {
                          "CidrIp": "0.0.0.0/0",
                          "Description": "Permitir todo el tráfico de salida"
                      }
                  ]
              }
            ]'

  create-ami:
    needs: deploy-ec2
    runs-on: ubuntu-latest
    steps:
      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Crear AMI de la instancia
        run: |
          aws ec2 create-image \
            --instance-id ${{ needs.deploy-ec2.outputs.instance-id }} \
            --name "MiAMIDesafioLatam" \
            --description "AMI creada desde mi instancia"
